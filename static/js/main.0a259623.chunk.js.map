{"version":3,"sources":["components/Board/Board.module.css","components/Square/Square.module.css","App.module.css","components/NumberPad/NumberPad.module.css","components/Square/Square.js","components/NumberPad/NumberPad.js","components/Board/Board.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Square","props","potentialValsKeyGenerator","val","square","id","toString","className","styles","row","col","onClick","e","showHighLightWrapper","onKeyDown","updateSquare","parseInt","key","tabIndex","style","backgroundColor","showError","selectedSquareID","enableHighLight","cur_val","PotentialSquare","potential_vals","map","enable","i","NormalSquare","NumberPad","Button","m","button","variant","SudokuCell","area","this","editable","Operation","action","squareID","stepsID","pre_val","Board","useState","Answers","setAnswers","Squares","setSquares","Operations","setOperations","OperationsID","setOperationsID","pencilMode","setPencilMode","hadError","setHadError","setselectedSquareID","checkGameOver","length","console","log","setGameOver","temp_squares","findError","foundErrorAll","target_square","found_error","mode","potentialValsUpdated","operation","operations","s","newSquare","operation2","showHighLightWithSelectedVal","newBoard","showHighLight","board","targetSquare","updatePencilMode","useEffect","j","tmp_sqaure","push","initSquares","startSolve","solver","require","puzzle","va","solve","result","BoardWrapper","Container","controlArea","controlAreaButtons","IconButton","color","index","stepID","selectedSquare","pop","answers","numberpad","Game","gameOver","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a259623.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2AbGg\",\"BoardWrapper\":\"Board_BoardWrapper__a7y7O\",\"Container\":\"Board_Container__3pAPr\",\"controlArea\":\"Board_controlArea__1bSdr\",\"controlAreaButtons\":\"Board_controlAreaButtons__1tLQD\",\"numberpad\":\"Board_numberpad__3X-ff\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__2chgw\",\"SquareInput\":\"Square_SquareInput__2R4JV\",\"PotentialSquare\":\"Square_PotentialSquare__m5Rlt\",\"NormalSquare\":\"Square_NormalSquare__2fDaJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Vcp-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"NumberPad_button__1vYvZ\"};","import React from 'react';\r\nimport styles from './Square.module.css'\r\n\r\nconst Square = (props) => {\r\n\r\n    const potentialValsKeyGenerator = (val) => {\r\n        return props.square.id.toString()+\"_\"+val.toString();\r\n    }\r\n\r\n    const showPotentialVals = () => {\r\n        return (\r\n            props.square.potential_vals.map((enable, i) => {\r\n                if(enable)\r\n                {\r\n                    return(<span key={potentialValsKeyGenerator(i)}>{i+1}</span>)\r\n                }\r\n                else\r\n                {\r\n                    return(<span key={potentialValsKeyGenerator(i)}></span>)\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    const showSquare = () => {\r\n        if (props.square.cur_val === 0) {\r\n            return (\r\n                <div className={styles.PotentialSquare} data-x={props.square.row} data-y={props.square.col}>\r\n                    {showPotentialVals()}\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div className={styles.NormalSquare} >\r\n                    {props.square.cur_val}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const changeSquareBackground = () => {\r\n        if(props.square.showError === true)\r\n        {\r\n            return '#d91818';\r\n        }\r\n        if(props.selectedSquareID === props.square.id)\r\n            return '#5797ff';\r\n        else if(props.square.enableHighLight === 1)\r\n            return '#477acc';\r\n        // else if(props.square.cur_val !== 0)\r\n        //     return '#3289a8';\r\n        else if(props.square.enableHighLight === 2)\r\n            return '#BBDEFB';\r\n        else if(props.square.enableHighLight === 3)\r\n            return '#E2EBF3';\r\n        \r\n        \r\n            \r\n    }\r\n\r\n    const handleOnClick = (e) => {\r\n        props.showHighLightWrapper(props.square.id);\r\n    }\r\n\r\n    const handleOnKeyDown = (e) => {\r\n        // console.log()\r\n        props.updateSquare(props.square.id, parseInt(e.key))\r\n    }\r\n    return (\r\n        <div className={styles.Square} \r\n        data-x={props.square.row} \r\n        data-y={props.square.col}\r\n        onClick={handleOnClick}\r\n        onKeyDown={handleOnKeyDown}\r\n        tabIndex={0}\r\n        style={{backgroundColor: changeSquareBackground()}}>\r\n            {showSquare()}\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport styles from './NumberPad.module.css'\r\nimport Button from '@material-ui/core/Button';\r\nconst NumberPad = (props) => {\r\n\r\n    const onClickNumberPad = () =>\r\n    {\r\n        props.updateSquare(props.selectedSquareID, props.val);\r\n    }\r\n\r\n    return (\r\n        <Button m=\"2rem\" className={styles.button} onClick={onClickNumberPad} variant=\"contained\">{props.val}</Button>\r\n    );\r\n}\r\n\r\nexport default NumberPad;","import React, { useState, useEffect } from 'react';\r\nimport styles from './Board.module.css'\r\nimport Square from '../Square/Square';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport NumberPad from '../NumberPad/NumberPad';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport GameOverMessage from '../GameOverMessage/GameOverMessage';\r\nclass SudokuCell {\r\n    constructor(row, col, area, id, cur_val = 0,\r\n        potential_vals = [true, true, true, true, true, true, true, true, true],\r\n        enableHighLight = 0, showError = false) {\r\n        this.cur_val = cur_val;\r\n        this.potential_vals = potential_vals;\r\n        /**\r\n         * 0 = no highlight\r\n         * 1 = primary highlight where square.cur_val = selected_sqaure.cur_val\r\n         * 2 = secondary highlight where square.potential_val[val-1] === true\r\n         * 3 = for square in same row, col, area as selected square\r\n         * 4 = error\r\n         */\r\n        this.enableHighLight = enableHighLight;\r\n        this.row = row;\r\n        this.col = col;\r\n        this.area = area;\r\n        this.id = id;\r\n        this.showError = showError;\r\n        this.editable = true;\r\n    }\r\n};\r\n\r\nclass Operation {\r\n    /**\r\n     * \r\n     * @param {string} action setCurVal, setPotentialVal \r\n     * @param {int} val \r\n     * @param {int} squareID \r\n     * @param {int} stepsID not unique, use to track steps\r\n     */\r\n    constructor(action, val, squareID, stepsID, pre_val) {\r\n        this.action = action;\r\n        this.val = val;\r\n        this.squareID = squareID;\r\n        this.stepsID = stepsID;\r\n        this.pre_val = pre_val;\r\n    }\r\n};\r\n\r\nclass backgroundEnum {\r\n    constructor() {\r\n        this.selectedSquare = 0;\r\n        // cur_val = select.cur_val\r\n        this.complementSelectedSquare = 1;\r\n        // potential_vals has select.cur_val\r\n        this.potentialVals = 2;\r\n        this.sameAreaSelectedSquare = 3;\r\n    }\r\n}\r\n\r\nconst Board = (props) => {\r\n    const [Answers, setAnswers] = useState([]);\r\n    const [Squares, setSquares] = useState([]);\r\n    const [Operations, setOperations] = useState([]);\r\n    const [OperationsID, setOperationsID] = useState(0);\r\n    const [pencilMode, setPencilMode] = useState(false);\r\n    const [hadError, setHadError] = useState(false);\r\n    const [selectedSquareID, setselectedSquareID] = useState(-1);\r\n\r\n    const getArea = (row, col) => {\r\n        if (row < 3 && col < 3)\r\n            return 1;\r\n        else if (row >= 3 && row < 6 && col < 3)\r\n            return 4;\r\n        else if (row >= 6 && col < 3)\r\n            return 7;\r\n        else if (row < 3 && col >= 3 && col < 6)\r\n            return 2;\r\n        else if (row >= 3 && row < 6 && col >= 3 && col < 6)\r\n            return 5;\r\n        else if (row >= 6 && col >= 3 && col < 6)\r\n            return 8;\r\n        else if (row < 3 && col >= 6)\r\n            return 3;\r\n        else if (row >= 3 && row < 6 && col >= 6)\r\n            return 6;\r\n        else if (row >= 6 && col >= 6)\r\n            return 9;\r\n    }\r\n\r\n    const checkGameOver = () => {\r\n        for (let i = 0; i < Squares.length; ++i) {\r\n            if (Squares[i].cur_val == 0) {\r\n                return;\r\n            }\r\n        }\r\n        if (!hadError) {\r\n            console.log('game over')\r\n            props.setGameOver(true);\r\n            let temp_squares = [...Squares];\r\n            for (let i = 0; i < temp_squares.length; ++i) {\r\n                temp_squares[i].editable = false;\r\n            }\r\n            setSquares(temp_squares);\r\n        }\r\n    }\r\n\r\n    const findError = () => {\r\n        let temp_squares = [...Squares];\r\n        for (let i = 0; i < Squares.length; ++i) {\r\n            temp_squares[i].showError = false;\r\n        }\r\n        let foundErrorAll = false;\r\n        for (let i = 0; i < Squares.length; ++i) {\r\n            let target_square = temp_squares[i];\r\n            temp_squares.map((square) => {\r\n                let found_error = false;\r\n                if (square.id !== target_square.id && square.cur_val === target_square.cur_val && target_square.cur_val !== 0) {\r\n                    if (square.row === target_square.row || square.col === target_square.col || square.area === target_square.area) {\r\n                        found_error = true;\r\n                        square.showError = true;\r\n                        target_square.showError = true;\r\n                        foundErrorAll = true;\r\n                    }\r\n                    if(Answers.length > 0 && square.cur_val != Answers[i])\r\n                    {\r\n                        // console.log('found error aganist solution')\r\n                        found_error = true;\r\n                        target_square.showError = true;\r\n                        foundErrorAll = true;\r\n                    }\r\n                }\r\n                if (!found_error && square.showError === false) {\r\n                    square.showError = false;\r\n                }\r\n                return square;\r\n            })\r\n        }\r\n        setSquares(temp_squares);\r\n        if (foundErrorAll) {\r\n            setHadError(true);\r\n        }\r\n        else {\r\n            setHadError(false);\r\n        }\r\n    }\r\n\r\n    const initSquares = () => {\r\n        let newBoard = [];\r\n        for (let i = 0; i < 9; ++i) {\r\n            for (let j = 0; j < 9; ++j) {\r\n                let tmp_sqaure = new SudokuCell(i, j, getArea(i, j), i * 9 + j);\r\n                newBoard.push(tmp_sqaure);\r\n            }\r\n        }\r\n        setSquares(newBoard);\r\n    }\r\n\r\n    const updateSquare = (id, val, mode = -1) => {\r\n        if (id === -1) {\r\n            showHighLightWithSelectedVal(val);\r\n            return;\r\n        }\r\n        if (Squares[id].editable === false) return;\r\n        let square = Squares[id];\r\n        let pre_val = square.cur_val;\r\n        let potentialValsUpdated = false;\r\n        // Set potential vals\r\n        if ((square.cur_val === 0 && pencilMode === true) || mode === 1) {\r\n            square.potential_vals[val - 1] = !square.potential_vals[val - 1];\r\n            let operation = new Operation('setPotentialVal', val, id, OperationsID, pre_val);\r\n            if (mode === -1) {\r\n                setOperations(operations => [...operations, operation]);\r\n                setOperationsID(OperationsID + 1);\r\n            }\r\n        }\r\n        // square in pencil mode. set the value\r\n        else if ((square.cur_val === 0 && pencilMode === false) || mode === 2) {\r\n            square.cur_val = val;\r\n            potentialValsUpdated = true;\r\n        }\r\n        // square in active mode. set the value\r\n        else if (square.cur_val > 0 && pencilMode === false) {\r\n            square.cur_val = val;\r\n            potentialValsUpdated = true;\r\n        }\r\n        // square in active mode. set square back to pencil mode and adjust the value in\r\n        // potential vals\r\n        else {\r\n            square.cur_val = 0;\r\n            if (mode === -1) {\r\n                let operation = new Operation('setCurVal', 0, id, OperationsID, pre_val);\r\n                setOperations(operations => [...operations, operation]);\r\n            }\r\n            square.potential_vals[val - 1] = true;\r\n            if (mode === -1) {\r\n                let operation = new Operation('setPotentialVal', val, id, OperationsID, pre_val);\r\n                setOperations(operations => [...operations, operation]);\r\n                setOperationsID(OperationsID + 2);\r\n            }\r\n        }\r\n        if (potentialValsUpdated) {\r\n            setSquares(\r\n                Squares.map(s => {\r\n                    let newSquare = s;\r\n                    if (s.id === square.id) {\r\n                        if (mode === -1) {\r\n                            // let operation = new Operation('setPotentialVal', val, newSquare.id, OperationsID, pre_val);\r\n                            // setOperations(operations => [...operations, operation]);\r\n                            let operation2 = new Operation('setCurVal', val, newSquare.id, OperationsID, pre_val);\r\n                            setOperations(operations => [...operations, operation2]);\r\n                            // setOperationsID(OperationsID + 2);\r\n                            setOperationsID(OperationsID + 1);\r\n                        }\r\n                        return square;\r\n                    }\r\n                    else if ((s.row === square.row || s.col === square.col || s.area === square.area)\r\n                        && newSquare.potential_vals[val - 1] === true) {\r\n                        newSquare.potential_vals[val - 1] = false;\r\n                        if (mode === -1) {\r\n                            let operation = new Operation('setPotentialVal', val, newSquare.id, OperationsID, pre_val);\r\n                            setOperations(operations => [...operations, operation]);\r\n                            setOperationsID(OperationsID + 1);\r\n                        }\r\n                        return newSquare;\r\n                    }\r\n                    else\r\n                        return s;\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            setSquares(\r\n                Squares.map(s => s.id === square.id ? square : s)\r\n            )\r\n        }\r\n        showHighLightWrapper(id);\r\n        findError();\r\n        checkGameOver();\r\n    }\r\n\r\n    const showHighLightWithSelectedVal = (val) => {\r\n        let newBoard = [...Squares];\r\n        for (let i = 0; i < newBoard.length; ++i) {\r\n            newBoard[i].enableHighLight = 0;\r\n            if (newBoard[i].cur_val === val)\r\n                newBoard[i].enableHighLight = 1;\r\n            else if (newBoard[i].cur_val < 1 && val >= 0) {\r\n                if (newBoard[i].potential_vals[val - 1] === true) {\r\n                    newBoard[i].enableHighLight = 2;\r\n                }\r\n            }\r\n        }\r\n        setSquares(newBoard);\r\n    }\r\n\r\n    const showHighLight = (board, val, row, col, area) => {\r\n        for (let i = 0; i < board.length; ++i) {\r\n            if (val !== 0) {\r\n                if (board[i].cur_val === val) {\r\n                    board[i].enableHighLight = 1;\r\n                }\r\n                else if (board[i].cur_val === 0 && board[i].potential_vals[val - 1] === true) {\r\n                    board[i].enableHighLight = 2;\r\n                }\r\n                else if ((board[i].row === row || board[i].col === col || board[i].area === area)) {\r\n                    board[i].enableHighLight = 3;\r\n                }\r\n            }\r\n            else {\r\n                if (board[i].row === row || board[i].col === col || board[i].area === area) {\r\n                    board[i].enableHighLight = 3;\r\n\r\n                }\r\n                else {\r\n                    board[i].enableHighLight = 0;\r\n                }\r\n\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    const showHighLightWrapper = (id) => {\r\n        let targetSquare = Squares[id];\r\n        let newBoard = [...Squares];\r\n        for (let i = 0; i < newBoard.length; ++i) {\r\n            newBoard[i].enableHighLight = 0;\r\n        }\r\n        newBoard = showHighLight(newBoard, targetSquare.cur_val, targetSquare.row, targetSquare.col, targetSquare.area);\r\n        if (targetSquare.cur_val !== 0) {\r\n            for (let i = 0; i < newBoard.length; ++i) {\r\n                if (newBoard[i].cur_val === targetSquare.cur_val) {\r\n                    newBoard = showHighLight(newBoard, targetSquare.cur_val, targetSquare.row, targetSquare.col, targetSquare.area);\r\n                }\r\n            }\r\n        }\r\n\r\n        setSquares(newBoard);\r\n        setselectedSquareID(id);\r\n    }\r\n\r\n    const updatePencilMode = (e) => {\r\n        setPencilMode(!pencilMode);\r\n    }\r\n\r\n    const reverseOperation = (e) => {\r\n        if (Operations.length === 0) return;\r\n        let operations = [...Operations];\r\n        let index = operations.length - 1;\r\n        let stepID = operations[operations.length - 1].stepsID;\r\n        let selectedSquare = selectedSquareID;\r\n        while (index >= 0 && operations[index].stepsID === stepID) {\r\n            if (operations[index].action === 'setCurVal') {\r\n                updateSquare(operations[index].squareID, operations[index].pre_val, 0);\r\n            }\r\n            else if (operations[index].action === 'setPotentialVal') {\r\n                // mode 1 to setpotential vals\r\n                updateSquare(operations[index].squareID, operations[index].val, 1);\r\n            }\r\n            --index;\r\n            operations.pop(operations.length - 1);\r\n        }\r\n        setOperations(operations);\r\n        setselectedSquareID(selectedSquare);\r\n        //     const name = e.target.getAttribute(\"name\")\r\n        //      updateList(list.filter(item => item.name !== name));\r\n    };\r\n\r\n    useEffect(() => {\r\n        initSquares();\r\n    }, []);\r\n\r\n    const onClickCancelSelect = (e) => {\r\n        setselectedSquareID(-1);\r\n        showHighLightWithSelectedVal(-1);\r\n    }\r\n\r\n    const startSolve = () => {\r\n        var SudokuSolver = require('sudoku-solver-js');\r\n        var solver = new SudokuSolver();\r\n        var puzzle = '';\r\n        for (let i = 0; i < Squares.length; ++i) {\r\n            puzzle += Squares[i].cur_val.toString();\r\n        }\r\n        console.log(puzzle)\r\n        let va = solver.solve(puzzle, { result: 'array' })\r\n        console.log(va);\r\n        setAnswers(va);\r\n        return va;\r\n    }\r\n\r\n    const showHint = () => {\r\n        if (Answers.length === 0)\r\n            return;\r\n        else {\r\n            updateSquare(selectedSquareID, Answers[selectedSquareID]);\r\n        }\r\n    }\r\n\r\n    const gaveUp = () => {\r\n        if (Answers.length === 0) {\r\n            let answers = startSolve();\r\n            for (let i = 0; i < answers.length; ++i) {\r\n                updateSquare(i, answers[i]);\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < Answers.length; ++i) {\r\n                updateSquare(i, Answers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const restart = () => {\r\n        console.log('restart')\r\n        props.setGameOver(false);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.Board}>\r\n            <div></div>\r\n            <div className={styles.BoardWrapper}>\r\n                <div className={styles.Container}>\r\n                    {Squares.map(square =>\r\n                        <Square\r\n                            key={square.row * 9 + square.col}\r\n                            square={square}\r\n                            updateSquare={updateSquare}\r\n                            selectedSquareID={selectedSquareID}\r\n                            showHighLightWrapper={showHighLightWrapper}\r\n                        />\r\n                    )}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={styles.controlArea}>\r\n                <div className={styles.controlAreaButtons}>\r\n                    {pencilMode ?\r\n                        <IconButton color='primary' onClick={updatePencilMode}>\r\n                            <BorderColorIcon />\r\n                        </IconButton>\r\n                        :\r\n                        <IconButton onClick={updatePencilMode}>\r\n                            <BorderColorIcon />\r\n                        </IconButton>}\r\n\r\n                    <IconButton onClick={reverseOperation}>\r\n                        <RestoreIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={onClickCancelSelect}>\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={startSolve}>\r\n                        <EmojiObjectsIcon />\r\n                        Solver\r\n                    </IconButton>\r\n                    <IconButton onClick={showHint}>\r\n                        <SentimentVerySatisfiedIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={gaveUp}>\r\n                        <ThumbDownAltIcon />\r\n                    </IconButton>\r\n                </div>\r\n\r\n                <div className={styles.numberpad}>\r\n                    <NumberPad val={1} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={2} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={3} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={4} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={5} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={6} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={7} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={8} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={9} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React, { useState } from 'react';\r\nimport Board from '../Board/Board'\r\nconst Game = () => {\r\n    const [gameOver, setGameOver] = useState(false);\r\n    return (\r\n            <Board\r\n                setGameOver={setGameOver}\r\n                gameOver={gameOver}\r\n            />\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport styles from './App.module.css';\nimport Game from './components/Game/Game'\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}