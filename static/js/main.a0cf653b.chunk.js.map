{"version":3,"sources":["components/Board/Board.module.css","components/Square/Square.module.css","App.module.css","components/NumberPad/NumberPad.module.css","components/Square/Square.js","components/NumberPad/NumberPad.js","components/Board/Board.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Square","props","potentialValsKeyGenerator","val","square","id","toString","className","styles","row","col","onClick","e","showHighLightWrapper","onKeyDown","updateSquare","parseInt","key","tabIndex","style","backgroundColor","showError","selectedSquareID","enableHighLight","cur_val","PotentialSquare","potential_vals","map","enable","i","NormalSquare","NumberPad","Button","m","button","variant","SudokuCell","area","this","Operation","action","squareID","stepsID","pre_val","Board","useState","Squares","setSquares","Operations","setOperations","OperationsID","setOperationsID","pencilMode","setPencilMode","setselectedSquareID","findError","temp_squares","length","target_square","found_error","mode","potentialValsUpdated","operation","operations","s","newSquare","operation2","showHighLightWithSelectedVal","newBoard","showHighLight","board","targetSquare","updatePencilMode","useEffect","j","tmp_sqaure","squares","initSquares","BoardWrapper","Container","controlArea","IconButton","color","index","stepID","selectedSquare","pop","numberpad","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0cf653b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2AbGg\",\"BoardWrapper\":\"Board_BoardWrapper__a7y7O\",\"Container\":\"Board_Container__3pAPr\",\"controlArea\":\"Board_controlArea__1bSdr\",\"numberpad\":\"Board_numberpad__3X-ff\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__2chgw\",\"SquareInput\":\"Square_SquareInput__2R4JV\",\"PotentialSquare\":\"Square_PotentialSquare__m5Rlt\",\"NormalSquare\":\"Square_NormalSquare__2fDaJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Vcp-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"NumberPad_button__1vYvZ\"};","import React from 'react';\r\nimport styles from './Square.module.css'\r\n\r\nconst Square = (props) => {\r\n\r\n    const potentialValsKeyGenerator = (val) => {\r\n        return props.square.id.toString()+\"_\"+val.toString();\r\n    }\r\n\r\n    const showPotentialVals = () => {\r\n        return (\r\n            props.square.potential_vals.map((enable, i) => {\r\n                if(enable)\r\n                {\r\n                    return(<span key={potentialValsKeyGenerator(i)}>{i+1}</span>)\r\n                }\r\n                else\r\n                {\r\n                    return(<span key={potentialValsKeyGenerator(i)}></span>)\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    const showSquare = () => {\r\n        if (props.square.cur_val === 0) {\r\n            return (\r\n                <div className={styles.PotentialSquare} data-x={props.square.row} data-y={props.square.col}>\r\n                    {showPotentialVals()}\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div className={styles.NormalSquare} >\r\n                    {props.square.cur_val}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const changeSquareBackground = () => {\r\n        if(props.square.showError === true)\r\n        {\r\n            return '#d91818';\r\n        }\r\n        if(props.selectedSquareID === props.square.id)\r\n            return '#5797ff';\r\n        else if(props.square.enableHighLight === 1)\r\n            return '#477acc';\r\n        // else if(props.square.cur_val !== 0)\r\n        //     return '#3289a8';\r\n        else if(props.square.enableHighLight === 2)\r\n            return '#BBDEFB';\r\n        else if(props.square.enableHighLight === 3)\r\n            return '#E2EBF3';\r\n        \r\n        \r\n            \r\n    }\r\n\r\n    const handleOnClick = (e) => {\r\n        props.showHighLightWrapper(props.square.id);\r\n    }\r\n\r\n    const handleOnKeyDown = (e) => {\r\n        // console.log()\r\n        props.updateSquare(props.square.id, parseInt(e.key))\r\n    }\r\n    return (\r\n        <div className={styles.Square} \r\n        data-x={props.square.row} \r\n        data-y={props.square.col}\r\n        onClick={handleOnClick}\r\n        onKeyDown={handleOnKeyDown}\r\n        tabIndex={0}\r\n        style={{backgroundColor: changeSquareBackground()}}>\r\n            {showSquare()}\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport styles from './NumberPad.module.css'\r\nimport Button from '@material-ui/core/Button';\r\nconst NumberPad = (props) => {\r\n\r\n    const onClickNumberPad = () =>\r\n    {\r\n        props.updateSquare(props.selectedSquareID, props.val);\r\n    }\r\n\r\n    return (\r\n        <Button m=\"2rem\" className={styles.button} onClick={onClickNumberPad} variant=\"contained\">{props.val}</Button>\r\n    );\r\n}\r\n\r\nexport default NumberPad;","import React, { useState, useEffect } from 'react';\r\nimport styles from './Board.module.css'\r\nimport Square from '../Square/Square';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport NumberPad from '../NumberPad/NumberPad';\r\nclass SudokuCell {\r\n    constructor(row, col, area, id, cur_val = 0,\r\n        potential_vals = [true, true, true, true, true, true, true, true, true],\r\n        enableHighLight = 0, showError = false) {\r\n        this.cur_val = cur_val;\r\n        this.potential_vals = potential_vals;\r\n        /**\r\n         * 0 = no highlight\r\n         * 1 = primary highlight where square.cur_val = selected_sqaure.cur_val\r\n         * 2 = secondary highlight where square.potential_val[val-1] === true\r\n         * 3 = for square in same row, col, area as selected square\r\n         * 4 = error\r\n         */\r\n        this.enableHighLight = enableHighLight;\r\n        this.row = row;\r\n        this.col = col;\r\n        this.area = area;\r\n        this.id = id;\r\n        this.showError = showError;\r\n    }\r\n};\r\n\r\nclass Operation {\r\n    /**\r\n     * \r\n     * @param {string} action setCurVal, setPotentialVal \r\n     * @param {int} val \r\n     * @param {int} squareID \r\n     * @param {int} stepsID not unique, use to track steps\r\n     */\r\n    constructor(action, val, squareID, stepsID, pre_val) {\r\n        this.action = action;\r\n        this.val = val;\r\n        this.squareID = squareID;\r\n        this.stepsID = stepsID;\r\n        this.pre_val = pre_val;\r\n    }\r\n};\r\n\r\nclass backgroundEnum {\r\n    constructor() {\r\n        this.selectedSquare = 0;\r\n        // cur_val = select.cur_val\r\n        this.complementSelectedSquare = 1;\r\n        // potential_vals has select.cur_val\r\n        this.potentialVals = 2;\r\n        this.sameAreaSelectedSquare = 3;\r\n    }\r\n}\r\n\r\nconst Board = () => {\r\n    const [Squares, setSquares] = useState([]);\r\n    const [Operations, setOperations] = useState([]);\r\n    const [OperationsID, setOperationsID] = useState(0);\r\n    const [pencilMode, setPencilMode] = useState(false);\r\n    const [selectedSquareID, setselectedSquareID] = useState(-1);\r\n\r\n    const getArea = (row, col) => {\r\n        if (row < 3 && col < 3)\r\n            return 1;\r\n        else if (row >= 3 && row < 6 && col < 3)\r\n            return 4;\r\n        else if (row >= 6 && col < 3)\r\n            return 7;\r\n        else if (row < 3 && col >= 3 && col < 6)\r\n            return 2;\r\n        else if (row >= 3 && row < 6 && col >= 3 && col < 6)\r\n            return 5;\r\n        else if (row >= 6 && col >= 3 && col < 6)\r\n            return 8;\r\n        else if (row < 3 && col >= 6)\r\n            return 3;\r\n        else if (row >= 3 && row < 6 && col >= 6)\r\n            return 6;\r\n        else if (row >= 6 && col >= 6)\r\n            return 9;\r\n    }\r\n\r\n    const findError = () => {\r\n        let temp_squares = [...Squares];\r\n        for (let i = 0; i < Squares.length; ++i) {\r\n            temp_squares[i].showError = false;\r\n        }\r\n        for (let i = 0; i < Squares.length; ++i) {\r\n            let target_square = temp_squares[i];\r\n            temp_squares.map((square) => {\r\n                let found_error = false;\r\n                if (square.id !== target_square.id && square.cur_val === target_square.cur_val && target_square.cur_val !== 0) {\r\n                    if (square.row === target_square.row || square.col === target_square.col || square.area === target_square.area) {\r\n                        found_error = true;\r\n                        square.showError = true;\r\n                        target_square.showError = true;\r\n                    }\r\n                }\r\n                if (!found_error && square.showError === false) {\r\n                    square.showError = false;\r\n                }\r\n                return square;\r\n            })\r\n        }\r\n        setSquares(temp_squares);\r\n    }\r\n\r\n    const initSquares = () => {\r\n        for (let i = 0; i < 9; ++i) {\r\n            for (let j = 0; j < 9; ++j) {\r\n                let tmp_sqaure = new SudokuCell(i, j, getArea(i, j), i * 9 + j);\r\n                setSquares(squares => [...squares, tmp_sqaure])\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateSquare = (id, val, mode = -1) => {\r\n        if (id === -1) {\r\n            showHighLightWithSelectedVal(val);\r\n            return;\r\n        }\r\n        let square = Squares[id];\r\n        let pre_val = square.cur_val;\r\n        let potentialValsUpdated = false;\r\n        // Set potential vals\r\n        if ((square.cur_val === 0 && pencilMode === true) || mode === 1) {\r\n            square.potential_vals[val - 1] = !square.potential_vals[val - 1];\r\n            let operation = new Operation('setPotentialVal', val, id, OperationsID, pre_val);\r\n            if (mode === -1) {\r\n                setOperations(operations => [...operations, operation]);\r\n                setOperationsID(OperationsID + 1);\r\n            }\r\n        }\r\n        // square in pencil mode. set the value\r\n        else if ((square.cur_val === 0 && pencilMode === false) || mode === 2) {\r\n            square.cur_val = val;\r\n            potentialValsUpdated = true;\r\n        }\r\n        // square in active mode. set the value\r\n        else if (square.cur_val > 0 && pencilMode === false) {\r\n            square.cur_val = val;\r\n            potentialValsUpdated = true;\r\n        }\r\n        // square in active mode. set square back to pencil mode and adjust the value in\r\n        // potential vals\r\n        else {\r\n            square.cur_val = 0;\r\n            if (mode === -1) {\r\n                let operation = new Operation('setCurVal', 0, id, OperationsID, pre_val);\r\n                setOperations(operations => [...operations, operation]);\r\n            }\r\n            square.potential_vals[val - 1] = true;\r\n            if (mode === -1) {\r\n                let operation = new Operation('setPotentialVal', val, id, OperationsID, pre_val);\r\n                setOperations(operations => [...operations, operation]);\r\n                setOperationsID(OperationsID + 2);\r\n            }\r\n        }\r\n        if (potentialValsUpdated) {\r\n            setSquares(\r\n                Squares.map(s => {\r\n                    let newSquare = s;\r\n                    if (s.id === square.id) {\r\n                        if (mode === -1) {\r\n                            // let operation = new Operation('setPotentialVal', val, newSquare.id, OperationsID, pre_val);\r\n                            // setOperations(operations => [...operations, operation]);\r\n                            let operation2 = new Operation('setCurVal', val, newSquare.id, OperationsID, pre_val);\r\n                            setOperations(operations => [...operations, operation2]);\r\n                            // setOperationsID(OperationsID + 2);\r\n                            setOperationsID(OperationsID + 1);\r\n                        }\r\n                        return square;\r\n                    }\r\n                    else if ((s.row === square.row || s.col === square.col || s.area === square.area)\r\n                        && newSquare.potential_vals[val - 1] === true) {\r\n                        newSquare.potential_vals[val - 1] = false;\r\n                        if (mode === -1) {\r\n                            let operation = new Operation('setPotentialVal', val, newSquare.id, OperationsID, pre_val);\r\n                            setOperations(operations => [...operations, operation]);\r\n                            setOperationsID(OperationsID + 1);\r\n                        }\r\n                        return newSquare;\r\n                    }\r\n                    else\r\n                        return s;\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            setSquares(\r\n                Squares.map(s => s.id === square.id ? square : s)\r\n            )\r\n        }\r\n        showHighLightWrapper(id);\r\n        findError();\r\n    }\r\n\r\n    const showHighLightWithSelectedVal = (val) => {\r\n        let newBoard = [...Squares];\r\n        for (let i = 0; i < newBoard.length; ++i) {\r\n            newBoard[i].enableHighLight = 0;\r\n            if (newBoard[i].cur_val === val)\r\n                newBoard[i].enableHighLight = 1;\r\n            else if (newBoard[i].cur_val < 1 && val >= 0) {\r\n                if (newBoard[i].potential_vals[val-1] === true) { \r\n                    newBoard[i].enableHighLight = 2; \r\n                }\r\n            }  \r\n        }\r\n        setSquares(newBoard);\r\n    }\r\n\r\n    const showHighLight = (board, val, row, col, area) => {\r\n        for (let i = 0; i < board.length; ++i) {\r\n            if (val !== 0) {\r\n                if (board[i].cur_val === val) {\r\n                    board[i].enableHighLight = 1;\r\n                }\r\n                else if (board[i].cur_val === 0 && board[i].potential_vals[val - 1] === true) {\r\n                    board[i].enableHighLight = 2;\r\n                }\r\n                else if ((board[i].row === row || board[i].col === col || board[i].area === area)) {\r\n                    board[i].enableHighLight = 3;\r\n                }\r\n            }\r\n            else {\r\n                if (board[i].row === row || board[i].col === col || board[i].area === area) {\r\n                    board[i].enableHighLight = 3;\r\n\r\n                }\r\n                else {\r\n                    board[i].enableHighLight = 0;\r\n                }\r\n\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    const showHighLightWrapper = (id) => {\r\n        let targetSquare = Squares[id];\r\n        let newBoard = [...Squares];\r\n        for (let i = 0; i < newBoard.length; ++i) {\r\n            newBoard[i].enableHighLight = 0;\r\n        }\r\n        newBoard = showHighLight(newBoard, targetSquare.cur_val, targetSquare.row, targetSquare.col, targetSquare.area);\r\n        if (targetSquare.cur_val !== 0) {\r\n            for (let i = 0; i < newBoard.length; ++i) {\r\n                if (newBoard[i].cur_val === targetSquare.cur_val) {\r\n                    newBoard = showHighLight(newBoard, targetSquare.cur_val, targetSquare.row, targetSquare.col, targetSquare.area);\r\n                }\r\n            }\r\n        }\r\n\r\n        setSquares(newBoard);\r\n        setselectedSquareID(id);\r\n    }\r\n\r\n    const updatePencilMode = (e) => {\r\n        setPencilMode(!pencilMode);\r\n    }\r\n\r\n    const reverseOperation = (e) => {\r\n        if (Operations.length === 0) return;\r\n        let operations = [...Operations];\r\n        let index = operations.length - 1;\r\n        let stepID = operations[operations.length - 1].stepsID;\r\n        let selectedSquare = selectedSquareID;\r\n        while (index >= 0 && operations[index].stepsID === stepID) {\r\n            if (operations[index].action === 'setCurVal') {\r\n                updateSquare(operations[index].squareID, operations[index].pre_val, 0);\r\n            }\r\n            else if (operations[index].action === 'setPotentialVal') {\r\n                // mode 1 to setpotential vals\r\n                updateSquare(operations[index].squareID, operations[index].val, 1);\r\n            }\r\n            --index;\r\n            operations.pop(operations.length - 1);\r\n        }\r\n        setOperations(operations);\r\n        setselectedSquareID(selectedSquare);\r\n        //     const name = e.target.getAttribute(\"name\")\r\n        //      updateList(list.filter(item => item.name !== name));\r\n    };\r\n\r\n    useEffect(() => {\r\n        initSquares();\r\n    }, []);\r\n\r\n    const onClickCancelSelect = (e) => {\r\n        setselectedSquareID(-1);\r\n        showHighLightWithSelectedVal(-1);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.Board}>\r\n            <div></div>\r\n            <div className={styles.BoardWrapper}>\r\n                <div className={styles.Container}>\r\n                    {Squares.map(square =>\r\n                        <Square\r\n                            key={square.row * 9 + square.col}\r\n                            square={square}\r\n                            updateSquare={updateSquare}\r\n                            selectedSquareID={selectedSquareID}\r\n                            showHighLightWrapper={showHighLightWrapper}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className={styles.controlArea}>\r\n                <div>\r\n                    {pencilMode ?\r\n                        <IconButton color='primary' onClick={updatePencilMode}>\r\n                            <BorderColorIcon />\r\n                        </IconButton>\r\n                        :\r\n                        <IconButton onClick={updatePencilMode}>\r\n                            <BorderColorIcon />\r\n                        </IconButton>}\r\n\r\n                    <IconButton onClick={reverseOperation}>\r\n                        <RestoreIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={onClickCancelSelect}>\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </div>\r\n\r\n                <div className={styles.numberpad}>\r\n                    <NumberPad val={1} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={2} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={3} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={4} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={5} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={6} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={7} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={8} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                    <NumberPad val={9} selectedSquareID={selectedSquareID} updateSquare={updateSquare} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from '../Board/Board'\r\nconst Game = () => {\r\n    return (\r\n        <Board></Board>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport styles from './App.module.css';\nimport Game from './components/Game/Game'\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}